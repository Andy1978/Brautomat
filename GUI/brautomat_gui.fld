# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cxx}
decl {\#include "../driver/cBrautomat.h"} {public global
} 

decl {\#include "Spreadsheet.h"} {public global
} 

decl {cBrautomat *myBrautomat = NULL;} {private local
} 

Function {close_cb(Fl_Widget*, void*)} {open return_type void
} {
  code {myBrautomat->set_temperatur_from_profile(0);
myBrautomat->set_temperature_mode(0);
  
myBrautomat->save_cfg("temp_profile.cfg");
delete myBrautomat;
exit(0);} {}
} 

Function {update_status(void*)} {open return_type void
} {
  code {myBrautomat->update();
vo_temperatur->value(myBrautomat->get_temperature());
vo_temperatur_setpoint->value(myBrautomat->get_temperature_set_point());
cb_heater->value(myBrautomat->get_heater_state());
vo_aktive_step->value(myBrautomat->get_aktive_step());
vo_remaining_step_time->value(myBrautomat->get_remaining_step_time());

Fl::repeat_timeout(0.5, update_status);} {}
} 

Function {} {open
} {
  Fl_Window mainwin {
    label {Brauautomat GUI v0.0.2} open
    xywh {27 155 600 800} type Double resizable size_range {600 800 1000 1000} visible
  } {
    Fl_Group {} {
      label {Rührwerk} open
      xywh {10 180 580 115} box GTK_UP_BOX align 5
    } {
      Fl_Light_Button {} {
        label Hand
        callback {myBrautomat->set_period_set_point(0);}
        xywh {25 205 70 30} type Radio value 1
      }
      Fl_Light_Button {} {
        label Sinus
        callback {myBrautomat->set_period_set_point(5*sl_periodendauer->value());}
        xywh {25 244 70 30} type Radio
      }
      Fl_Value_Slider sl_amplitude {
        label Amplitude
        callback {myBrautomat->set_amplitude_set_point(sl_amplitude->value());}
        xywh {120 210 330 25} type {Horz Knob} align 5 minimum -126 maximum 126 step 1
      }
      Fl_Value_Slider sl_periodendauer {
        label {Periodendauer [s]}
        callback {myBrautomat->set_period_set_point(5*sl_periodendauer->value());}
        xywh {120 255 330 20} type {Horz Knob} align 5 minimum 2 maximum 50 step 0.2 value 10
      }
      Fl_Button {} {
        label {Motor aus}
        callback {double start = sl_amplitude->value();
double step = (start>0)? -3: 3;

for (double k = start; fabs(k)>=fabs(step); k+=step)
{
  sl_amplitude->value(k);
  myBrautomat->set_amplitude_set_point(k);
  Fl::wait(1e-6);
}

sl_amplitude->value(0);
myBrautomat->set_amplitude_set_point(0);}
        xywh {476 207 90 30}
      }
    }
    Fl_Group {} {
      label {Heizung Sollwerte und Steuerung} open
      xywh {10 25 385 130} box GTK_UP_BOX align 5
    } {
      Fl_Light_Button {} {
        label Hand
        callback {myBrautomat->set_heater(0);
myBrautomat->set_temperature_mode(0);}
        xywh {20 35 65 30} type Radio value 1
      }
      Fl_Light_Button {} {
        label Auto
        callback {myBrautomat->set_temperature_mode(1);}
        xywh {20 95 65 30} type Radio
      }
      Fl_Button {} {
        label Ein
        callback {myBrautomat->set_heater(1);}
        xywh {124 35 40 30}
      }
      Fl_Button {} {
        label Aus
        callback {myBrautomat->set_heater(0);}
        xywh {169 35 40 30}
      }
      Fl_Value_Slider sl_temperatur {
        label Solltemperatur
        callback {myBrautomat->set_temperature(sl_temperatur->value());}
        xywh {125 90 259 25} type {Horz Knob} align 5 minimum 15 maximum 99.5 step 0.5 value 20
      }
      Fl_Check_Button cb_temp_from_profile {
        label {Sollwert aus Temperaturprofil}
        callback {myBrautomat->set_temperatur_from_profile(cb_temp_from_profile->value());}
        xywh {120 121 230 24} down_box DOWN_BOX
      }
    }
    Fl_Group {} {
      label {Heizung Istwerte} open
      xywh {405 25 185 130} box GTK_UP_BOX align 5
    } {
      Fl_Value_Output vo_temperatur {
        label {Temperatur [°C]}
        xywh {535 35 40 30} maximum 100 step 0.1 value 20
      }
      Fl_Value_Output vo_temperatur_setpoint {
        label {Sollwert [°C]}
        xywh {535 70 40 30} maximum 100 step 0.1 value 20
      }
      Fl_Check_Button cb_heater {
        label {Heizung aktiv}
        xywh {425 110 135 30} down_box DOWN_BOX deactivate
      }
    }
    Fl_Group {} {
      label Temperaturprofil open selected
      xywh {10 320 580 465} box GTK_UP_BOX align 5
    } {
      Fl_Table temp_profile {
        label Schrittparameter open
        xywh {30 465 405 305} align 5
        class Spreadsheet
      } {}
      Fl_Value_Output vo_aktive_step {
        label {aktiver Schritt }
        xywh {255 340 50 25}
      }
      Fl_Value_Output vo_remaining_step_time {
        label {verbleibende Zeit im Schritt [s] }
        xywh {255 370 50 25}
      }
      Fl_Button {} {
        label {Schritt vor}
        callback {myBrautomat->next_step(o->value());}
        xywh {320 340 115 30} when 1
      }
      Fl_Button {} {
        label {Schritt zurück}
        callback {myBrautomat->previous_step(o->value());}
        xywh {320 370 115 30} when 1
      }
      Fl_Button {} {
        label {übernehmen}
        callback {for(int k=0;k<MAX_STEPS;++k)
{
  myBrautomat->set_temp_profile(k+1,
  	temp_profile->get_value(k, 0),
  	temp_profile->get_value(k, 1),
  	temp_profile->get_value(k, 2));
}}
        xywh {460 585 105 40}
      }
      Fl_Value_Input vi_time_offset {
        label {Schritt verlängern [s]}
        xywh {255 415 50 25} maximum 600 step 1
      }
      Fl_Button {} {
        label {verlängern}
        callback {myBrautomat->add_to_remaining_step_time(vi_time_offset->value());}
        xywh {320 413 115 30}
      }
    }
  }
  code {mainwin->callback(close_cb);
myBrautomat = new cBrautomat("/dev/ttyUSB0");

// Table rows
temp_profile->row_header(1);
temp_profile->row_header_width(70);
temp_profile->row_resize(1);
temp_profile->rows(10);
temp_profile->row_height_all(25);
// Table cols
temp_profile->col_header(1);
temp_profile->col_header_height(25);
temp_profile->col_resize(1);
temp_profile->cols(MAX_COLS);
  
temp_profile->col_width(0, 90);
temp_profile->col_width(1, 120);
temp_profile->col_width(2, 120);

myBrautomat->load_cfg("temp_profile.cfg");

int step_time;
float dT_dt;
float step_temp;

for(int k=0;k<MAX_STEPS;++k)
{
  myBrautomat->get_temp_profile(k+1, step_time, dT_dt, step_temp);
  temp_profile->set_value(k, 0, step_time);
  temp_profile->set_value(k, 1, dT_dt);
  temp_profile->set_value(k, 2, step_temp);
}

  
Fl::add_timeout(0.5, update_status);} {}
} 
